<?php

# Creaci√≥n de un array
$frutas = ['üçé', 'üçå', 'ü••', 'üçá', 'üçê'];

$frutas = array('üçé', 'üçå', 'ü••', 'üçá', 'üçê');

# Mostrar array con formateado
echo '<pre>';
var_dump($frutas);
echo '</pre>';

# Visualizar el array de forma m√°s clara
echo '<pre>';
print_r($frutas);
echo '</pre>';

# Obtener elemento por el √≠ndice
echo $frutas[3];

# Podemos verificar la existencia de alg√∫n elemento
echo isset($frutas[2]);

# A√±adir un elemento al array (array_push mismo efecto)
$frutas[] = 'üçç';

# Obtener el length del array
echo count($frutas);

# M√©todos para arrays

array_push($frutas, 'üçà');     // A√±adir elemento al final del array
array_pop($frutas);            // Eliminar el √∫ltimo elemento del array
array_unshift($frutas, 'üçë');  // A√±adir elemento al inicio del array
array_shift($frutas);          // Eliminar el primer elemento del array

$string = 'ü••,üçá,üçë,ü•ù';

# Equivalente al m√©todo split() de Javascript
$frutas = explode(',', $string);

# Equivalente al m√©todo join() de Javascript
$string = implode('-', $frutas);

# Equivalente al m√©todo includes() de Javascript
in_array('ü••', $frutas);

# Equivalente al m√©todo indexOf() de Javascript
array_search('üçë', $frutas);

# Equivalente al m√©todo concat() de Javascript
$frutas = array_merge($frutas, ['üçè', 'ü•≠']);

# Equivalente al m√©todo sort() de Javascript
sort($frutas);

# Tambien tenemos los m√©todos map, filter y reduce de toda la vida
array_map(fn($item) => $item, $frutas);
array_filter($frutas, fn($item) => true);
array_reduce($frutas, fn($acc, $item) => $acc.$item);

# Se puede usar el spread operator de toda la vida
echo '<pre>';
print_r([...$frutas, ...[1, 2, 3]]);
echo '</pre>';

# ARRAYS ASOCIATIVOS

// Se le conoce como array asociativo a aquellos arrays que asocian 
// llaves o keys a sus elementos:
$array = [
    'manzana' => 'üçé',
    'cereza' => 'üçí',
    'naranja' => 'üçä',
];

// As√≠ accedemos a un elemento asociado a una llave
echo $array['manzana'];  // Imprime üçé

// En un array asociativo puede haber tanto elemento no asociados como asociados
$array = [
    'manzana' => 'üçé',
    'ü••',  //  -> [0]
    true,  //  -> [1]
    'pera' => 'üçê',
    'uva' => 'üçá',
];

// Por defecto, todos los elementos de un array ya estan asociados a un valor,
// en este caso, ü•• y true tienen asociada como llave un valor n√∫merico. Ese
// valor se determina a partir del √∫ltimo valor n√∫merico asociado, por defecto,
// el valor num√©rico inicial siempre ser√° 0:

// PD: El √∫ltimo valor num√©rico asociado puede ser tanto de tipo num√©rico como string,
//     siempre y cuando sea un n√∫mero como tal.

$array = [
    'uva' => 'üçá',
    2 => 'ü•ù',        // √∫ltimo valor num√©rico asociado: 2
    'cereza' => 'üçí',
    'üçì',  // -> [3]
    'üçã',  // -> [4]
];

$array = [
    'uva' => 'üçá',
    '-3' => 'ü•ù',        // mismo efecto, √∫ltimo valor num√©rico asociado: -3
    'cereza' => 'üçí',
    'üçì',  // -> [-2]
    'üçã',  // -> [-1]
];

// Se puede asociar cualquier tipo de valor a un elemento, a excepci√≥n de otro
// array o un objeto
$array = [
    'banana' => 'üçå',
    '-3' => 'ü•ù',        // mismo efecto, √∫ltimo valor num√©rico asociado: -3
    'durazno' => 'üçë',
    true => 'üçì',        // booleans se expresan como enteros, √∫ltimo valor n√∫merico asociado: 1
    3.1416 => 'PI',      // floats o doubles se expresan como enteros, √∫ltimo valor n√∫merico asociado: 3
    NULL => true,        // NULL¬¥s se expresan como un string vac√≠o ""
    'üçç',  // -> [4]       Al final el √∫ltimo valor num√©rico asociado fue el 3, 
           //              por lo que el siguiente indice es 4.
];

// Crear un nuevo elemento con valor asociado
$array['types'] = ['string', 'boolean', 'integer'];

echo '<pre>';
print_r($array);
echo '</pre>';